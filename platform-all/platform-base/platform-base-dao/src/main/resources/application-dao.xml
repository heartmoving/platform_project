<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		
	   <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        	<property name="ignoreUnresolvablePlaceholders" value="true" />  
        	<property name="order" value="1" />
        	<property name="locations">  
          	 <list>  
	              <value>classpath:jdbc.properties</value>  
            </list>  
        </property>  
       </bean>  
	
	<bean primary="true"  id="baseDataSource" class="org.platform.base.datasource.BaseDataSource">
	   <property name="dataSourceBusiness">
	   		<bean class="org.platform.base.datasource.DataSourceBusinessImpl"/>
	   </property>
		<property name="writerDataSource">
			<map>
			   <entry key="writer">
			       <list>
				  	<bean  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
						<!-- 基本属性 url、user、password -->
						<property name="driverClassName" value="${datasource.driverClassName}" />
						<property name="url" value="${datasource.url}" />
						<property name="username" value="${datasource.username}" />
						<property name="password" value="${datasource.password}" />
						<!-- 配置初始化大小、最小、最大 -->
						<property name="initialSize" value="${datasource.minimumIdle}" />
						<property name="minIdle" value="${datasource.minimumIdle}" />
						<property name="maxActive" value="${datasource.maximumPoolSize}" />
						<!-- 配置获取连接等待超时的时间 -->
						<property name="maxWait" value="60000" />
						<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
						<property name="timeBetweenEvictionRunsMillis" value="60000" />
						<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
						<property name="minEvictableIdleTimeMillis" value="300000" />
						<property name="validationQuery" value="SELECT 'x'" />
						<property name="testWhileIdle" value="true" />
						<property name="testOnBorrow" value="false" />
						<property name="testOnReturn" value="false" />
						<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
						<property name="poolPreparedStatements" value="false" />
						<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
						<!-- 配置监控统计拦截的filters -->
						<property name="filters" value="stat" />
					</bean>
				  </list>
			   </entry>
			</map>
		</property>
		<property name="readDataSource">
			<map>
				<entry key="read">
				<list>
				  	<bean  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
						<!-- 基本属性 url、user、password -->
						<property name="driverClassName" value="${datasource.driverClassName}" />
						<property name="url" value="${datasource.url}" />
						<property name="username" value="${datasource.username}" />
						<property name="password" value="${datasource.password}" />
						<!-- 配置初始化大小、最小、最大 -->
						<property name="initialSize" value="${datasource.minimumIdle}" />
						<property name="minIdle" value="${datasource.minimumIdle}" />
						<property name="maxActive" value="${datasource.maximumPoolSize}" />
						<!--配置获取连接等待超时的时间 -->
						<property name="maxWait" value="60000" />
						<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
						<property name="timeBetweenEvictionRunsMillis" value="60000" />
						<!--配置一个连接在池中最小生存的时间，单位是毫秒 -->
						<property name="minEvictableIdleTimeMillis" value="300000" />
						<property name="validationQuery" value="SELECT 'x'" />
						<property name="testWhileIdle" value="true" />
						<property name="testOnBorrow" value="false" />
						<property name="testOnReturn" value="false" />
						<!--打开PSCache，并且指定每个连接上PSCache的大小-->
						<property name="poolPreparedStatements" value="false" />
						<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
						<property name="filters" value="stat" />
					</bean>
				  </list>
			   </entry>
			</map>
		</property>
	</bean>
	
	<!-- <bean primary="true" id="priDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		基本属性 url、user、password
		<property name="driverClassName" value="${datasource.driverClassName}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		配置初始化大小、最小、最大
		<property name="initialSize" value="${datasource.minimumIdle}" />
		<property name="minIdle" value="${datasource.minimumIdle}" />
		<property name="maxActive" value="${datasource.maximumPoolSize}" />
		配置获取连接等待超时的时间
		<property name="maxWait" value="60000" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		打开PSCache，并且指定每个连接上PSCache的大小
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"	value="20" />
		配置监控统计拦截的filters
		<property name="filters" value="stat" />
	</bean> -->
    
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="baseDataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>  
    </bean>  
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="org.platform.base.dao" />  
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"></property>  
    </bean>  
    <!-- 事务管理 -->
   <bean id="transactionManager" class="org.platform.base.datasource.BaseDataSourceTransactionManager">
  		 <property name="dataSource" ref="baseDataSource" />
  		 <property name="methodMatch" value="writer" />
   </bean>
   
   <!--切面事务-->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* org.platform.*.service..*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
   <import resource="spring-idbuilder.xml"/>
</beans>